package fo.rodol.berlinclock

import spock.lang.Specification

import static fo.rodol.berlinclock.BerlinClock.fromTime

/**
 * Created by rodolfo on 30/03/2016.
 */
class TestBerlinClock extends Specification {

    void 'should have the light #evenSeconds when time is #time'() {

        given:
        def berlinClock = fromTime(time)

        expect:
        berlinClock.getEvenSeconds() == evenSeconds

        where:
        time       | evenSeconds
        '00:00:00' | 0
        '00:00:01' | 1
        '00:00:02' | 0
        '00:00:03' | 1
        '00:00:20' | 0
        '00:00:31' | 1
        '00:00:32' | 0
        '00:00:33' | 1
    }

    void 'should have the first row #firstRow when time is #time'() {

        given:
        def berlinClock = fromTime(time)

        expect:
        berlinClock.getFirstRow() == firstRow

        where:
        time       | firstRow
        '00:00:00' | [0, 0, 0, 0]
        '01:00:00' | [0, 0, 0, 0]
        '02:00:00' | [0, 0, 0, 0]
        '03:00:00' | [0, 0, 0, 0]
        '04:00:00' | [0, 0, 0, 0]
        '05:00:00' | [1, 0, 0, 0]
        '06:00:00' | [1, 0, 0, 0]
        '07:00:00' | [1, 0, 0, 0]
        '08:00:00' | [1, 0, 0, 0]
        '09:00:00' | [1, 0, 0, 0]
        '10:00:00' | [1, 1, 0, 0]
        '11:00:00' | [1, 1, 0, 0]
        '12:00:00' | [1, 1, 0, 0]
        '13:00:00' | [1, 1, 0, 0]
        '14:00:00' | [1, 1, 0, 0]
        '15:00:00' | [1, 1, 1, 0]
        '16:00:00' | [1, 1, 1, 0]
        '17:00:00' | [1, 1, 1, 0]
        '18:00:00' | [1, 1, 1, 0]
        '19:00:00' | [1, 1, 1, 0]
        '20:00:00' | [1, 1, 1, 1]
        '21:00:00' | [1, 1, 1, 1]
        '22:00:00' | [1, 1, 1, 1]
        '23:00:00' | [1, 1, 1, 1]
    }

    void 'should have the second row #secondRow when time is #time'() {

        given:
        def berlinClock = fromTime(time)

        expect:
        berlinClock.getSecondRow() == secondRow

        where:
        time       | secondRow
        '00:00:00' | [0, 0, 0, 0]
        '01:00:00' | [1, 0, 0, 0]
        '02:00:00' | [1, 1, 0, 0]
        '03:00:00' | [1, 1, 1, 0]
        '04:00:00' | [1, 1, 1, 1]
        '05:00:00' | [0, 0, 0, 0]
        '06:00:00' | [1, 0, 0, 0]
        '07:00:00' | [1, 1, 0, 0]
        '08:00:00' | [1, 1, 1, 0]
        '09:00:00' | [1, 1, 1, 1]
        '10:00:00' | [0, 0, 0, 0]
        '11:00:00' | [1, 0, 0, 0]
        '12:00:00' | [1, 1, 0, 0]
        '13:00:00' | [1, 1, 1, 0]
        '14:00:00' | [1, 1, 1, 1]
        '15:00:00' | [0, 0, 0, 0]
        '16:00:00' | [1, 0, 0, 0]
        '17:00:00' | [1, 1, 0, 0]
        '18:00:00' | [1, 1, 1, 0]
        '19:00:00' | [1, 1, 1, 1]
        '20:00:00' | [0, 0, 0, 0]
        '21:00:00' | [1, 0, 0, 0]
        '22:00:00' | [1, 1, 0, 0]
        '23:00:00' | [1, 1, 1, 0]
    }

    void 'should have the third row #thirdRow when time is #time'() {

        given:
        def berlinClock = fromTime(time)

        expect:
        berlinClock.getThirdRow() == thirdRow

        where:
        time       | thirdRow
        '00:00:00' | [0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0]
        '00:01:00' | [0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0]
        '00:02:00' | [0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0]
        '00:03:00' | [0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0]
        '00:04:00' | [0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0]
        '00:05:00' | [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0]
        '00:06:00' | [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0]
        '00:07:00' | [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0]
        '00:08:00' | [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0]
        '00:09:00' | [1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0]
        '00:10:00' | [1, 1, 0, 0, 0, 0, 0, 0, 0, 0 ,0]
        '00:30:00' | [1, 1, 1, 1, 1, 1, 0, 0, 0, 0 ,0]
        '00:35:00' | [1, 1, 1, 1, 1, 1, 1, 0, 0, 0 ,0]
        '00:45:00' | [1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,0]
        '00:50:00' | [1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,0]
        '00:55:00' | [1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1]
    }

    void 'should have the fourth row #fourthRow when time is #time'() {

        given:
        def berlinClock = fromTime(time)

        expect:
        berlinClock.getFourthRow() == fourthRow

        where:
        time       | fourthRow
        '00:00:00' | [0, 0, 0, 0]
        '00:01:00' | [1, 0, 0, 0]
        '00:02:00' | [1, 1, 0, 0]
        '00:03:00' | [1, 1, 1, 0]
        '00:04:00' | [1, 1, 1, 1]
        '00:05:00' | [0, 0, 0, 0]
        '00:06:00' | [1, 0, 0, 0]
        '00:07:00' | [1, 1, 0, 0]
        '00:08:00' | [1, 1, 1, 0]
        '00:09:00' | [1, 1, 1, 1]
        '00:10:00' | [0, 0, 0, 0]
    }
}
